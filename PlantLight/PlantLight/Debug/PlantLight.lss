
PlantLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000baf  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d9  00000000  00000000  00001865  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000115  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	cc c0       	rjmp	.+408    	; 0x1ca <__vector_24>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 34       	cpi	r26, 0x45	; 69
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	49 d0       	rcall	.+146    	; 0xe4 <main>
  52:	3e c1       	rjmp	.+636    	; 0x2d0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <setupADC>:

#define OK 0x00
#define NOK 0xFF

void setupADC(void) {
	ADMUX |= (1 << REFS0) | (1 << ADLAR);
  56:	ec e7       	ldi	r30, 0x7C	; 124
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	80 66       	ori	r24, 0x60	; 96
  5e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1) | (1 << ADPS2) | (1 << ADEN);
  60:	ea e7       	ldi	r30, 0x7A	; 122
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	86 68       	ori	r24, 0x86	; 134
  68:	80 83       	st	Z, r24
  6a:	08 95       	ret

0000006c <readLight>:
}

unsigned char readLight(void) {
	ADMUX = (ADMUX & 0b11110000) | LIGHT;
  6c:	ec e7       	ldi	r30, 0x7C	; 124
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	80 7f       	andi	r24, 0xF0	; 240
  74:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);    // ADC konverzio elinditasa
  76:	ea e7       	ldi	r30, 0x7A	; 122
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  80:	80 81       	ld	r24, Z
  82:	86 fd       	sbrc	r24, 6
  84:	fd cf       	rjmp	.-6      	; 0x80 <readLight+0x14>
	ADCSRA |= (1<<ADSC);         // konverzió elindítás
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  90:	80 81       	ld	r24, Z
  92:	86 fd       	sbrc	r24, 6
  94:	fd cf       	rjmp	.-6      	; 0x90 <readLight+0x24>
	return (ADCH);
  96:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
}
  9a:	08 95       	ret

0000009c <shortBlink>:

void shortBlink() {
	LED_PORT |= (1<<LED_P);			// Turn LED ON.
  9c:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	87 ea       	ldi	r24, 0xA7	; 167
  a0:	91 e6       	ldi	r25, 0x61	; 97
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <shortBlink+0x6>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <shortBlink+0xc>
  a8:	00 00       	nop
	_delay_ms(100);
	LED_PORT &= ~(1<<LED_P);		// Turn LED OFF.
  aa:	58 98       	cbi	0x0b, 0	; 11
  ac:	87 ea       	ldi	r24, 0xA7	; 167
  ae:	91 e6       	ldi	r25, 0x61	; 97
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <shortBlink+0x14>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <shortBlink+0x1a>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <longBlink>:
	_delay_ms(100);
}
void longBlink() {
	LED_PORT |= (1<<LED_P);			// Turn LED ON.
  ba:	58 9a       	sbi	0x0b, 0	; 11
  bc:	2f e9       	ldi	r18, 0x9F	; 159
  be:	86 e8       	ldi	r24, 0x86	; 134
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <longBlink+0x8>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <longBlink+0x12>
  cc:	00 00       	nop
	_delay_ms(500);
	LED_PORT &= ~(1<<LED_P);		// Turn LED OFF.
  ce:	58 98       	cbi	0x0b, 0	; 11
  d0:	2f e9       	ldi	r18, 0x9F	; 159
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <longBlink+0x1c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <longBlink+0x26>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <main>:
}


int main(void)
{
	setupADC();
  e4:	b8 df       	rcall	.-144    	; 0x56 <setupADC>
	uint8_t data;
	LED_DDR |= (1<<LED_P);			// Set LED pin as an output.
  e6:	50 9a       	sbi	0x0a, 0	; 10
	twiSlaveInit( SLAVE_ADRS );		// Initialize TWI hardware for Slave operation.
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	21 d0       	rcall	.+66     	; 0x12e <twiSlaveInit>
	sei();							// Enable interrupts.
  ec:	78 94       	sei
	twiSlaveEnable();				// Enable the TWI interface to receive data.
  ee:	26 d0       	rcall	.+76     	; 0x13c <twiSlaveEnable>
	static char light;
	twiClearOutput();
  f0:	57 d0       	rcall	.+174    	; 0x1a0 <twiClearOutput>
    while (1) 
    {
		if( twiDataInReceiveBuffer() ) {
  f2:	4d d0       	rcall	.+154    	; 0x18e <twiDataInReceiveBuffer>
  f4:	88 23       	and	r24, r24
  f6:	e9 f3       	breq	.-6      	; 0xf2 <main+0xe>
  f8:	83 ec       	ldi	r24, 0xC3	; 195
  fa:	99 e0       	ldi	r25, 0x09	; 9
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x18>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x1e>
 102:	00 00       	nop
			_delay_ms(10);
			data = twiReceiveByte();
 104:	2f d0       	rcall	.+94     	; 0x164 <twiReceiveByte>
			if( data == COMM_CHECK) {
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	31 f4       	brne	.+12     	; 0x116 <main+0x32>
				shortBlink();
 10a:	c8 df       	rcall	.-112    	; 0x9c <shortBlink>
				shortBlink();
 10c:	c7 df       	rcall	.-114    	; 0x9c <shortBlink>
				twiClearOutput();
 10e:	48 d0       	rcall	.+144    	; 0x1a0 <twiClearOutput>
				twiTransmitByte(OK);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	18 d0       	rcall	.+48     	; 0x144 <twiTransmitByte>
 114:	ee cf       	rjmp	.-36     	; 0xf2 <main+0xe>
			} 
			else if (data == READ_LIGHT) {
 116:	80 3a       	cpi	r24, 0xA0	; 160
 118:	29 f4       	brne	.+10     	; 0x124 <main+0x40>
				light = readLight();
 11a:	a8 df       	rcall	.-176    	; 0x6c <readLight>
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				twiTransmitByte(light);
 120:	11 d0       	rcall	.+34     	; 0x144 <twiTransmitByte>
 122:	e7 cf       	rjmp	.-50     	; 0xf2 <main+0xe>
			}
			else {
				longBlink();
 124:	ca df       	rcall	.-108    	; 0xba <longBlink>
				longBlink();
 126:	c9 df       	rcall	.-110    	; 0xba <longBlink>
				twiTransmitByte(NOK);
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	0c d0       	rcall	.+24     	; 0x144 <twiTransmitByte>
 12c:	e2 cf       	rjmp	.-60     	; 0xf2 <main+0xe>

0000012e <twiSlaveInit>:
bool
twiDataInTransmitBuffer( void )
{
  // return 0 (false) if the transmit buffer is empty
  return txHead != txTail;
}
 12e:	88 0f       	add	r24, r24
 130:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__EEPROM_REGION_LENGTH__+0x7f00ba>
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
 13a:	08 95       	ret

0000013c <twiSlaveEnable>:
 13c:	85 ec       	ldi	r24, 0xC5	; 197
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
 142:	08 95       	ret

00000144 <twiTransmitByte>:
 144:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <txHead>
 148:	9f 5f       	subi	r25, 0xFF	; 255
 14a:	9f 71       	andi	r25, 0x1F	; 31
 14c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <txTail>
 150:	92 17       	cp	r25, r18
 152:	39 f0       	breq	.+14     	; 0x162 <twiTransmitByte+0x1e>
 154:	e9 2f       	mov	r30, r25
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ed 5f       	subi	r30, 0xFD	; 253
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 83       	st	Z, r24
 15e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <txHead>
 162:	08 95       	ret

00000164 <twiReceiveByte>:
 164:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <rxHead>
 168:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxTail>
 16c:	98 17       	cp	r25, r24
 16e:	69 f0       	breq	.+26     	; 0x18a <twiReceiveByte+0x26>
 170:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxTail>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	8f 71       	andi	r24, 0x1F	; 31
 178:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <rxTail>
 17c:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <rxTail>
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	eb 5d       	subi	r30, 0xDB	; 219
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 81       	ld	r24, Z
 188:	08 95       	ret
 18a:	88 e8       	ldi	r24, 0x88	; 136
 18c:	08 95       	ret

0000018e <twiDataInReceiveBuffer>:
 18e:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <rxHead>
 192:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <rxTail>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	29 13       	cpse	r18, r25
 19a:	01 c0       	rjmp	.+2      	; 0x19e <twiDataInReceiveBuffer+0x10>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret

000001a0 <twiClearOutput>:
 * Reset the output buffer to empty. Used to recover from sync errors.
 */
void
twiClearOutput( void )
{
	txTail = 0;
 1a0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <txTail>
	txHead = 0;
 1a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <txHead>
 1a8:	08 95       	ret

000001aa <twiStuffRxBuf>:
twiStuffRxBuf( uint8_t data )
{
	uint8_t tmphead;

	// calculate buffer index
	tmphead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 1aa:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <rxHead>
 1ae:	9f 5f       	subi	r25, 0xFF	; 255
 1b0:	9f 71       	andi	r25, 0x1F	; 31

	// check for free space in buffer
	if ( tmphead == rxTail )
 1b2:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <rxTail>
 1b6:	92 17       	cp	r25, r18
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <twiStuffRxBuf+0x1e>
	{
		return;
	}

	// store data into buffer
	rxBuf[ tmphead ] = data;
 1ba:	e9 2f       	mov	r30, r25
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	eb 5d       	subi	r30, 0xDB	; 219
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	80 83       	st	Z, r24

	// update index
	rxHead = tmphead;
 1c4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <rxHead>
 1c8:	08 95       	ret

000001ca <__vector_24>:
 * TWI Interrupt Service
 * Called by TWI Event
 * This is a simple state machine that services a TWI Event. (see AVR311 for more detail)
 */
ISR( TWI_vect )
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	switch( TWSR )
 1ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 1f0:	88 39       	cpi	r24, 0x98	; 152
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <__vector_24+0x2c>
 1f4:	55 c0       	rjmp	.+170    	; 0x2a0 <__vector_24+0xd6>
 1f6:	90 f4       	brcc	.+36     	; 0x21c <__vector_24+0x52>
 1f8:	80 37       	cpi	r24, 0x70	; 112
 1fa:	51 f1       	breq	.+84     	; 0x250 <__vector_24+0x86>
 1fc:	30 f4       	brcc	.+12     	; 0x20a <__vector_24+0x40>
 1fe:	88 23       	and	r24, r24
 200:	09 f4       	brne	.+2      	; 0x204 <__vector_24+0x3a>
 202:	4e c0       	rjmp	.+156    	; 0x2a0 <__vector_24+0xd6>
 204:	80 36       	cpi	r24, 0x60	; 96
 206:	c9 f0       	breq	.+50     	; 0x23a <__vector_24+0x70>
 208:	4f c0       	rjmp	.+158    	; 0x2a8 <__vector_24+0xde>
 20a:	88 38       	cpi	r24, 0x88	; 136
 20c:	09 f4       	brne	.+2      	; 0x210 <__vector_24+0x46>
 20e:	48 c0       	rjmp	.+144    	; 0x2a0 <__vector_24+0xd6>
 210:	80 39       	cpi	r24, 0x90	; 144
 212:	b9 f0       	breq	.+46     	; 0x242 <__vector_24+0x78>
 214:	80 38       	cpi	r24, 0x80	; 128
 216:	09 f0       	breq	.+2      	; 0x21a <__vector_24+0x50>
 218:	47 c0       	rjmp	.+142    	; 0x2a8 <__vector_24+0xde>
 21a:	13 c0       	rjmp	.+38     	; 0x242 <__vector_24+0x78>
 21c:	88 3b       	cpi	r24, 0xB8	; 184
 21e:	e1 f0       	breq	.+56     	; 0x258 <__vector_24+0x8e>
 220:	28 f4       	brcc	.+10     	; 0x22c <__vector_24+0x62>
 222:	80 3a       	cpi	r24, 0xA0	; 160
 224:	c9 f1       	breq	.+114    	; 0x298 <__vector_24+0xce>
 226:	88 3a       	cpi	r24, 0xA8	; 168
 228:	b9 f0       	breq	.+46     	; 0x258 <__vector_24+0x8e>
 22a:	3e c0       	rjmp	.+124    	; 0x2a8 <__vector_24+0xde>
 22c:	88 3c       	cpi	r24, 0xC8	; 200
 22e:	c1 f1       	breq	.+112    	; 0x2a0 <__vector_24+0xd6>
 230:	88 3f       	cpi	r24, 0xF8	; 248
 232:	b1 f1       	breq	.+108    	; 0x2a0 <__vector_24+0xd6>
 234:	80 3c       	cpi	r24, 0xC0	; 192
 236:	61 f1       	breq	.+88     	; 0x290 <__vector_24+0xc6>
 238:	37 c0       	rjmp	.+110    	; 0x2a8 <__vector_24+0xde>
	{
		case TWI_SRX_ADR_ACK:				// 0x60 Own SLA+W has been received ACK has been returned. Expect to receive data.
//		case TWI_SRX_ADR_ACK_M_ARB_LOST:	// 0x68 Own SLA+W has been received; ACK has been returned. RESET interface.
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);		// Prepare for next event. Should be DATA.
 23a:	85 ec       	ldi	r24, 0xC5	; 197
 23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			break;
 240:	36 c0       	rjmp	.+108    	; 0x2ae <__vector_24+0xe4>

		case TWI_SRX_ADR_DATA_ACK:			// 0x80 Previously addressed with own SLA+W; Data received; ACK'd
		case TWI_SRX_GEN_DATA_ACK:			// 0x90 Previously addressed with general call; Data received; ACK'd
			// Put data into RX buffer
			twiStuffRxBuf( TWDR );
 242:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
 246:	b1 df       	rcall	.-158    	; 0x1aa <twiStuffRxBuf>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);		// Prepare for next event. Should be more DATA.
 248:	85 ec       	ldi	r24, 0xC5	; 197
 24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  			break;
 24e:	2f c0       	rjmp	.+94     	; 0x2ae <__vector_24+0xe4>
			
		case TWI_SRX_GEN_ACK:				// 0x70 General call address has been received; ACK has been returned
//		case TWI_SRX_GEN_ACK_M_ARB_LOST:	// 0x78 General call address has been received; ACK has been returned
			// TODO: Set General Address flag
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);		// Prepare for next event. Should be DATA.
 250:	85 ec       	ldi	r24, 0xC5	; 197
 252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			break;
 256:	2b c0       	rjmp	.+86     	; 0x2ae <__vector_24+0xe4>

		case TWI_STX_ADR_ACK:				// 0xA8 Own SLA+R has been received; ACK has been returned. Load DATA.
//		case TWI_STX_ADR_ACK_M_ARB_LOST:	// 0xB0 Own SLA+R has been received; ACK has been returned
		case TWI_STX_DATA_ACK:				// 0xB8 Data byte in TWDR has been transmitted; ACK has been received. Load DATA.
			if ( txHead != txTail )
 258:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <txHead>
 25c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <txTail>
 260:	98 17       	cp	r25, r24
 262:	79 f0       	breq	.+30     	; 0x282 <__vector_24+0xb8>
			{
				txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 264:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <txTail>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	8f 71       	andi	r24, 0x1F	; 31
 26c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <txTail>
				TWDR = txBuf[ txTail ];
 270:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <txTail>
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ed 5f       	subi	r30, 0xFD	; 253
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	80 81       	ld	r24, Z
 27c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
 280:	03 c0       	rjmp	.+6      	; 0x288 <__vector_24+0xbe>
			}
			else
			{
				// the buffer is empty. Send 0x88. Too much data was asked for.
				TWDR = 0x88;
 282:	88 e8       	ldi	r24, 0x88	; 136
 284:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
			}
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);		// Prepare for next event.
 288:	85 ec       	ldi	r24, 0xC5	; 197
 28a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			break;
 28e:	0f c0       	rjmp	.+30     	; 0x2ae <__vector_24+0xe4>

		case TWI_STX_DATA_NACK:				// 0xC0 Data byte in TWDR has been transmitted; NOT ACK has been received. End of Sending.
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);		// Prepare for next event. Should be new message.
 290:	85 ec       	ldi	r24, 0xC5	; 197
 292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			break;
 296:	0b c0       	rjmp	.+22     	; 0x2ae <__vector_24+0xe4>

		case TWI_SRX_STOP_RESTART:			// 0xA0 A STOP condition or repeated START condition has been received while still addressed as Slave
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);		// Prepare for next event.
 298:	85 ec       	ldi	r24, 0xC5	; 197
 29a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			break;
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <__vector_24+0xe4>
		case TWI_SRX_ADR_DATA_NACK:			// 0x88 Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
		case TWI_SRX_GEN_DATA_NACK:			// 0x98 Previously addressed with general call; data has been received; NOT ACK has been returned
		case TWI_STX_DATA_ACK_LAST_BYTE:	// 0xC8 Last byte in TWDR has been transmitted (TWEA = 0); ACK has been received
		case TWI_NO_STATE:					// 0xF8 No relevant state information available; TWINT = 0
		case TWI_BUS_ERROR:					// 0x00 Bus error due to an illegal START or STOP condition
			TWCR =   (1<<TWSTO)|(1<<TWINT);   // Recover from TWI_BUS_ERROR
 2a0:	80 e9       	ldi	r24, 0x90	; 144
 2a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			// TODO: Set an ERROR flag to tell main to restart interface.
			break;
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <__vector_24+0xe4>

		default:							// OOPS
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);		// Prepare for next event. Should be more DATA.
 2a8:	85 ec       	ldi	r24, 0xC5	; 197
 2aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			break;
	}
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
